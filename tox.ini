[tox]
envlist = py{36}-lint, py36-unit-quick, py36-lint_docstrings, py36-lint_docs, py{36,37}-unit, py36-gxwf_test_test
source_dir = planemo
test_dir = tests

[testenv]
commands =
    lint: flake8
    lint: black --check --diff .
    lint: isort --check --diff .
    lint_docs: make lint-docs
    lint_docstrings: flake8 --ignore='D107,D401,D105' {[tox]source_dir}
    unit: pytest {env:PYTEST_FAIL_FAIL:} {env:PYTEST_CAPTURE:} -m {env:PYTEST_MARK:""} {env:PYTEST_TARGET:{[tox]test_dir}} {posargs}
    mypy: mypy --install-types --non-interactive {[tox]source_dir} {posargs}
    gxwf_test_test: make setup-venv gxwf-test-test

passenv = 
    PLANEMO_*
    PG*
    HOME
    DOCS
    GIT_*

deps =
    lint,lint_docstrings: flake8
    lint: black
    lint: isort
    lint_docs: -rdev-requirements.txt
    lint_docs,quick,unit: -rrequirements.txt
    lint_docstrings: flake8_docstrings
    unit: pytest 
    # unit: pytest-timeout
    unit: coverage
    unit: flask
    mypy: mypy

setenv =
    gx: PYTEST_MARK="tests_galaxy_branch"
    diagnostic: PLANEMO_TEST_VERBOSE=1
    diagnostic: PYTEST_CAPTURE="--capture=no"
    failfast: PYTEST_FAIL_FAIL="-x"
    servecmd: PYTEST_TARGET="tests/test_cmd_serve.py::ServeTestCase::test_serve_daemon"
    serveshedcmd: PYTEST_TARGET="tests/test_cmd_serve.py::ServeTestCase::test_shed_serve"
    serveclientcmd: PYTEST_TARGET="tests/test_cmd_serve.py::ServeTestCase::test_serve_client_python3"
    servebasic: PYTEST_TARGET="tests/test_galaxy_serve.py::GalaxyServeTestCase::test_serve_daemon"
    serveshed: PYTEST_TARGET="tests/test_galaxy_serve.py::GalaxyServeTestCase::test_shed_serve_daemon"
    servewkfl: PYTEST_TARGET="tests/test_galaxy_serve.py::GalaxyServeTestCase::test_serve_workflow"
    servetraining: PYTEST_TARGET="tests/test_training_tutorial.py::test_get_hands_on_boxes_from_local_galaxy"
    initandtest: PYTEST_TARGET="tests/test_init_and_test.py"
    trainingwfcmd: PYTEST_TARGET="tests/test_cmd_training_generate_from_wf.py"
    runcmd: PYTEST_TARGET="tests/test_run.py::RunTestCase::test_run_gxtool_randomlines"
    wftest: PYTEST_TARGET="tests/test_test_engines.py::test_galaxy_wf_tests"
    wfidtest: PYTEST_TARGET="tests/test_cmds_with_workflow_id.py"
    condatest: PYTEST_TARGET="tests/test_cmd_test_conda.py::CmdTestCondaTestCase::test_conda_dependencies_by_default"
    nonredundant: PLANEMO_SKIP_REDUNDANT_TESTS=1
    noclientbuild: PLANEMO_SKIP_GALAXY_CLIENT_TESTS=1
    noshed: PLANEMO_SKIP_SHED_TESTS=1
    quick: PLANEMO_SKIP_SLOW_TESTS=1
    quick: PLANEMO_SKIP_GALAXY_TESTS=1
    master: PLANEMO_TEST_GALAXY_BRANCH=master
    dev: PLANEMO_TEST_GALAXY_BRANCH=dev
    2109: PLANEMO_TEST_GALAXY_BRANCH=release_21.09
    2105: PLANEMO_TEST_GALAXY_BRANCH=release_21.05
    2101: PLANEMO_TEST_GALAXY_BRANCH=release_21.01
skip_install =
    doc_test,lint,lint_docs,lint_docstrings,mypy,gxwf_test_test: True
whitelist_externals =
    lint_docs: make
    gxwf_test_test: make


[testenv:doc_test]
commands = bash scripts/run_doc_test.sh
skipsdist = True
whitelist_externals = bash
deps = 
